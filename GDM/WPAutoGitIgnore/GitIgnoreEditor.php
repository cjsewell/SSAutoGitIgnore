<?php

namespace GDM\WPAutoGitIgnore;

use GDM\WPAutoGitIgnore\Errors\AutoGitIgnoreInvalidParameterException;
use GDM\WPAutoGitIgnore\Errors\AutoGitIgnoreParseException;
use GDM\WPAutoGitIgnore\Errors\AutoGitIgnorePermissionException;
use GDM\WPAutoGitIgnore\Errors\AutoGitIgnoreSaveFailedException;

class GitIgnoreEditor
{

    /**
     * Git comment marking the start of auto generated lines
     *
     * @var string
     */
    private $startMarker = "# START Do not modify the lines between here and #END, they will be regenerated by GitIgnoreEditor";

    /**
     * Git comment marking the end of auto generated lines
     *
     * @var string
     */
    private $endMarker = "# END of GitIgnoreEditor";

    /**
     * Full path to the target .gitignore path
     *
     * @var string
     */
    private $filePath;

    /**
     * Array containing all lines in the current .gitgnore file
     *
     * @var array
     */
    private $readLines = [];

    /**
     * Total number of lines in the current .gitgnore file
     *
     * @var int
     */
    private $numLines = 0;

    /**
     * Index of $readLines where $starMarker was found
     *
     * @var int
     */
    private $startIndex = 0;

    /**
     * Index of $readLines where $endMarker was found
     *
     * @var int
     */
    private $endIndex = 0;

    /**
     * All lines found in $readLines before $startMarker
     *
     * @var array
     */
    private $beforeLines = [];

    /**
     * All lines found in $readLines before between $startMarker and $endMarker
     *
     * @var array
     */
    private $autoLines = [];

    /**
     * All lines found in $readLines after $endMaker
     *
     * @var array
     */
    private $afterLines = [];

    /**
     * GitIgnoreEditor constructor.
     *
     * @param string $ignoreFilePath
     *
     * @throws AutoGitIgnoreParseException
     * @throws AutoGitIgnorePermissionException
     */
    public function __construct($ignoreFilePath = ".gitignore")
    {
        $this->filePath = $ignoreFilePath;
        $this->CheckGitIgnore();
        $this->parse();
    }

    /**
     * Loads the current .gitignore and parses it.
     * Overwites/resets any unsaved changes
     *
     * @return self
     * @throws AutoGitIgnoreParseException
     */
    public function parse()
    {
        $this->readLines = file($this->filePath, FILE_IGNORE_NEW_LINES);
        if (in_array($this->startMarker, $this->readLines) && ! in_array($this->endMarker, $this->readLines)) {
            throw new AutoGitIgnoreParseException("Found start marker on line " . ( $this->findStartIndex() + 1 ) . " without an end marker. Please manually edit " . $this->filePath);
        } elseif (in_array($this->endMarker, $this->readLines) && ! in_array($this->startMarker, $this->readLines)) {
            throw new AutoGitIgnoreParseException("Found end marker on line " . ( $this->findEndIndex() + 1 ) . " without a start marker. Please manually edit " . $this->filePath);
        }
        $this->startIndex = $this->findStartIndex();
        $this->endIndex   = $this->findEndIndex();
        if ($this->endIndex < $this->startIndex) {
            throw new AutoGitIgnoreParseException("End marker found on line " . ( $this->endIndex + 1 ) . " before start maker on line " . ( $this->startIndex + 1 ) . ". Please manually edit " . $this->filePath);
        }

        $this->numLines = count($this->readLines);

        if ($this->startIndex === false) {
            $this->startIndex = $this->numLines + 1;
        }
        if ($this->startIndex !== 0) {
            $this->beforeLines = array_slice($this->readLines, 0, $this->startIndex);
        }
        if ($this->endIndex === false) {
            $this->endIndex = $this->numLines - 1;
        }

        if ($this->endIndex !== $this->numLines - 1) {
            $this->afterLines = array_slice($this->readLines, $this->endIndex + 1, $this->numLines);
        }

        $this->autoLines = array_slice($this->readLines, $this->startIndex, $this->endIndex);

        // If autoLines is empty, this is the first time we are auto adding to this gitinore.
        // So just add the markers
        if (empty($this->autoLines)) {
            // Add an empy line above the marker, unless its on the first line or already had one
            if ($this->startIndex !== 0 && ! empty($this->readLines[ $this->endIndex ])) {
                $this->autoLines[] = PHP_EOL;
            }
            $this->autoLines[] = $this->startMarker;
            $this->autoLines[] = $this->endMarker;
        }

        return $this;
    }

    /**
     * Set the lines to appear between the makers
     *
     * @param string[] $lines
     *
     * @return self
     * @throws AutoGitIgnoreInvalidParameterException
     */
    public function setLines($lines)
    {
        if (! is_array($lines)) {
            throw new AutoGitIgnoreInvalidParameterException("$lines must be an array. Each value is one line");
        }
        if (current($lines) !== $this->startMarker) {
            array_unshift($lines, $this->startMarker);
        }
        if (end($lines) !== $this->endMarker) {
            $lines[] = $this->endMarker;
        }
        $this->autoLines = $lines;

        return $this;
    }

    /**
     * Save chanes to the .gitinore file
     *
     * @return self
     * @throws AutoGitIgnoreSaveFailedException|AutoGitIgnorePermissionException
     */
    public function save()
    {
        $this->CheckGitIgnore();
        if (! empty($this->beforeLines) && trim(end($this->beforeLines))) {
            $this->beforeLines[] = '';
        }
        if (empty($this->afterLines) || trim(reset($this->afterLines))) {
            array_unshift($this->afterLines, '');
        }
        $this->readLines = array_merge($this->beforeLines, $this->autoLines, $this->afterLines);
        if (count($this->readLines)) {
            if (! file_put_contents($this->filePath, implode(PHP_EOL, $this->readLines))) {
                throw new AutoGitIgnoreSaveFailedException("Saving to " . $this->filePath . " failed");
            }
        }

        return $this;
    }

    /**
     * Find the index in the readLines array containg the value of $line
     *
     * @param string $line the line to search for
     *
     * @return int
     */
    public function findLine($line)
    {
        return array_search($line, $this->readLines, true);
    }

    /**
     * Find the index in the readLines array containg the start marker
     *
     * @return int
     */
    public function findStartIndex()
    {
        return $this->findLine($this->startMarker);
    }

    /**
     * Find the index in the readLines array containg the end marker
     *
     * @return int
     */
    public function findEndIndex()
    {
        return $this->findLine($this->endMarker);
    }

    /**
     * Prints debug info
     * @return self
     */
    public function debug()
    {
        echo "filePath    = " . $this->filePath . PHP_EOL;
        echo "startMarker = " . $this->startMarker . PHP_EOL;
        echo "endMarker   = " . $this->endMarker . PHP_EOL;
        echo "startIndex  = " . $this->startIndex . PHP_EOL;
        echo "endIndex    = " . $this->endIndex . PHP_EOL;
        echo "numLines    = " . $this->numLines . PHP_EOL;
        echo "Start       = " . print_r($this->beforeLines, true);
        echo "Auto      = " . print_r($this->autoLines, true);
        echo "End         = " . print_r($this->afterLines, true);

        return $this;
    }

    /**
     *
     * @return self
     * @throws AutoGitIgnorePermissionException
     */
    protected function checkGitIgnore()
    {
        if (! file_exists($this->filePath)) {
            if (! is_writable(dirname($this->filePath))) {
                throw new AutoGitIgnorePermissionException("Do not have permission to create " . $this->filePath . ". .gitignore does not exist, and unable to create it");
            }
            touch($this->filePath);
        } elseif (! is_writable($this->filePath)) {
            throw new AutoGitIgnorePermissionException("Do not have permission to edit " . $this->filePath . ".");
        }

        return $this;
    }
}
